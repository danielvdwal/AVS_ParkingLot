package de.fh_koeln.avs.imagecapturer.view;

import com.hazelcast.client.HazelcastClient;
import com.hazelcast.client.config.ClientConfig;
import com.hazelcast.client.config.ClientNetworkConfig;
import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.core.ITopic;
import com.sun.javafx.geom.Vec2f;
import de.fh_koeln.avs.global.ImageData;
import de.fh_koeln.avs.imagecapturer.controller.IImageCapturerController;
import de.fh_koeln.avs.imagecapturer.controller.ImageCapturerController;
import de.fh_koeln.avs.imagecapturer.converter.MatToBufferedImageConverter;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author rvictor
 */
public class MainView extends javax.swing.JFrame {

    private IImageCapturerController imgCapCon;
    private MatToBufferedImageConverter bufferedImageConverter;
    private HazelcastInstance hz;
    private ITopic topic;
    private boolean stream;

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        streamTButton = new javax.swing.JToggleButton();
        clusterTButton = new javax.swing.JToggleButton();
        streamPanel = new javax.swing.JPanel();
        streamView = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AVS Parking Lot Monitor - PrePreAlpha"); // NOI18N
        setResizable(false);

        controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Men√º"));

        streamTButton.setText("Stream"); // NOI18N
        streamTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamTButtonActionPerformed(evt);
            }
        });

        clusterTButton.setText("Cluster"); // NOI18N
        clusterTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterTButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clusterTButton)
                .addContainerGap())
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(streamTButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(streamTButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clusterTButton)
                .addContainerGap(407, Short.MAX_VALUE))
        );

        streamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Stream"));
        streamPanel.setMaximumSize(new java.awt.Dimension(1280, 1024));

        streamView.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        streamView.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout streamPanelLayout = new javax.swing.GroupLayout(streamPanel);
        streamPanel.setLayout(streamPanelLayout);
        streamPanelLayout.setHorizontalGroup(
            streamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(streamView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        streamPanelLayout.setVerticalGroup(
            streamPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(streamView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        streamView.getAccessibleContext().setAccessibleName("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(streamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(streamPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void streamTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamTButtonActionPerformed
        imgCapCon = new ImageCapturerController();

        if (streamTButton.isSelected()) {
            imgCapCon.startCamera();
            new Thread(() -> {
                while (streamTButton.isSelected()) {
                    try {
                        BufferedImage image = houghLinesP(imgCapCon.getRawCapturedImage());
                        
                        streamView.setIcon(getScaledImage(image, streamView.getHeight(), streamView.getHeight()));
                        if (stream) {
                            if (topic == null) {
                                ClientNetworkConfig networkConfig = new ClientNetworkConfig();
                                networkConfig.addAddress("139.6.65.26:5701");
                                ClientConfig clientConfig = new ClientConfig();
                                clientConfig.setNetworkConfig(networkConfig);
                                hz = HazelcastClient.newHazelcastClient(clientConfig);
                                topic = hz.getTopic("ImageCapturer");
                            }
                            topic.publish(new ImageData(image));
                        }
                        image = null;
                        
                        Thread.sleep(40);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                imgCapCon.stopCamera();
                imgCapCon = null;
                streamView.setIcon(null);
            }).start();
        }

    }//GEN-LAST:event_streamTButtonActionPerformed

    private void clusterTButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterTButtonActionPerformed
        stream = true;
    }//GEN-LAST:event_clusterTButtonActionPerformed

    /**
     * Resizes an image using a Graphics2D object backed by a BufferedImage.
     *
     * @param srcImg - source image to scale
     * @param w - desired width
     * @param h - desired height
     * @return - the new resized image
     */
    private ImageIcon getScaledImage(Image srcImg, int w, int h) {
        BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = resizedImg.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(srcImg, 0, 0, w, h, null);
        g2.dispose();
        return new ImageIcon(resizedImg);
    }
    
    private BufferedImage houghLinesP(Mat image) {
        bufferedImageConverter = new MatToBufferedImageConverter();
        
        if (image.empty()) {
            JOptionPane.showMessageDialog(null, "Fehler: Das eingelesene Image ist leer!", "Fehler: Bild einlesen", JOptionPane.ERROR_MESSAGE);
        }
        else {
            Mat thresholdImage = new Mat(streamView.getHeight(), streamView.getWidth(), CvType.CV_8UC1);
            Imgproc.cvtColor(image, thresholdImage, Imgproc.COLOR_RGB2GRAY, 4);
            Imgproc.Canny(thresholdImage, thresholdImage, 80, 100);
            Mat lines = new Mat();
            int threshold = 50;
            int minLineSize = 20;
            int lineGap = 20;
            
            Imgproc.HoughLinesP(thresholdImage, lines, 1, Math.PI/180, threshold, minLineSize, lineGap);
            
            for (int i = 0; i < lines.cols(); i++) {
                double[] vec = lines.get(0, i);
                double x1 = vec[0],
                        y1 = vec[1],
                        x2 = vec[2],
                        y2 = vec[3];
                Point start = new Point(x1, y1);
                Point end = new Point (x2, y2);
                
                Core.line(image, start, end, new Scalar(255, 0 ,0), 3);
            }
            thresholdImage = null;
            lines = null;
        }
        BufferedImage bufferedHoughImage = bufferedImageConverter.convertToBufferedImage(image, true);
        bufferedImageConverter = null;
        
        return bufferedHoughImage;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainView().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton clusterTButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel streamPanel;
    private javax.swing.JToggleButton streamTButton;
    private javax.swing.JLabel streamView;
    // End of variables declaration//GEN-END:variables
}
